

Main:

package sample;

import javafx.application.Application;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.stage.Stage;

public class Main extends Application {

    @Override
    public void start(Stage primaryStage) throws Exception{
        Parent root = FXMLLoader.load(getClass().getResource("sample.fxml"));
        primaryStage.setTitle("Hello World");
        primaryStage.setScene(new Scene(root, 300, 275));
        primaryStage.show();
    }


    public static void main(String[] args) {
        launch(args);
    }
}



---------------------
Controller:


package sample;                  // Sorgt dafür das zwischen Präsentation(View) und dem Model ein Austausch findet





import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.text.Text;

import java.awt.event.ActionEvent;

public class Controller {


    @FXML
    private Text output;

    private long num1 = 0;
    private long num2 = 0;

    private boolean start = true;  // nach dem drücken der gleich taste und eingeben der neuen zahlen sorgt boolean start für neustart

    private String operator = "";
    private Model model = new Model();  // die Klasse Model: um auf die Methode Calkulation zuzugreifen


    @FXML         //FXML brauchen wir um: damit das file fxml sich an private und geschützten Methoden wenden kann
    private void processNum(javafx.event.ActionEvent event){      //Arbeitet mit den Zahlentasten

        if(start){
            output.setText("");    // löscht den Inhalt des Displays
            start = false;
        }
        String value = ((Button)event.getSource()).getText();  //event wird in Button übertragen. getSource annahme des
         output.setText(output.getText()+value);               //Objekts auf dem das Ereignis stattfindet.
    }                                                         // getText annahme des textes des Objekts(des Knopes
                                                              //bei output fügen wir die Zahl hinzu

    @FXML
    private void processOperator(javafx.event.ActionEvent event){          //Arbeitet mit der Operatoren

        String value = ((Button)event.getSource()).getText();   //Bekommen den Wert des Buttons

        if(!"=".equals(value)){                    //wenn die operation nicht gleich gleich, und ist nicht leer,so üergeben wir es value
            if(!operator.isEmpty()) return;
            operator = value;
            num1 = Long.parseLong(output.getText());    //und bekommen die Zahl die als erstes eingegeben wurde
            output.setText("");      // dann die entleerung des Displayinhalts
        }  else {                    //wenn die Operation gleich entspricht
            if(operator.isEmpty()) return;    //wenn die Operation leer ist, geben wir was zurück?
            output.setText(String.valueOf(model.calculation(num1,Long.parseLong(output.getText()),operator)));   //wenn der Operator existeirt, geben wir das Ergebnis raus
            operator = "";                     //getText ist die zweite Eingabe der Zahl nach dem Operator
            start = true;                     // operator wird entleert und start auf true gesetzt


        }

    }



}




---------------------------------
Sample FXML:


<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.Button?>
<?import javafx.scene.layout.HBox?>
<?import javafx.scene.layout.StackPane?>
<?import javafx.scene.layout.VBox?>
<?import javafx.scene.shape.Rectangle?>

<?import javafx.scene.text.Text?>
<VBox maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" fx:controller="sample.Controller"  minWidth="-Infinity" prefHeight="400.0" prefWidth="300.0" xmlns="http://javafx.com/javafx/11.0.1" xmlns:fx="http://javafx.com/fxml/1">
   <children>
      <StackPane prefHeight="150.0" prefWidth="200.0">
         <children>
            <Rectangle arcHeight="5.0" arcWidth="5.0" fill="DODGERBLUE" height="100.0" stroke="BLACK" strokeType="INSIDE" width="200.0" />
             <Text fx:id="output"/>
         </children>
      </StackPane>
      <HBox alignment="CENTER" prefHeight="100.0" prefWidth="200.0" spacing="10.0">
      <children>
         <Button mnemonicParsing="false" onAction="#processNum" prefHeight="50.0" prefWidth="50.0" text="7" />
         <Button mnemonicParsing="false" onAction="#processNum" prefHeight="50.0" prefWidth="50.0" text="8" />
         <Button mnemonicParsing="false" onAction="#processNum" prefHeight="50.0" prefWidth="50.0" text="9" />
         <Button mnemonicParsing="false" onAction="#processOperator" prefHeight="50.0" prefWidth="50.0" text="/" />
      </children>
   </HBox>

      <HBox alignment="CENTER" prefHeight="100.0" prefWidth="200.0" spacing="10.0">
         <children>
            <Button mnemonicParsing="false" onAction="#processNum" prefHeight="50.0" prefWidth="50.0" text="4" />
            <Button mnemonicParsing="false" onAction="#processNum" prefHeight="50.0" prefWidth="50.0" text="5" />
            <Button mnemonicParsing="false" onAction="#processNum" prefHeight="50.0" prefWidth="50.0" text="6" />
            <Button mnemonicParsing="false" onAction="#processOperator" prefHeight="50.0" prefWidth="50.0" text="*" />
         </children>
      </HBox>

      <HBox alignment="CENTER" prefHeight="100.0" prefWidth="200.0" spacing="10.0">
         <children>
            <Button mnemonicParsing="false" onAction="#processNum" prefHeight="50.0" prefWidth="50.0" text="1" />
            <Button mnemonicParsing="false" onAction="#processNum" prefHeight="50.0" prefWidth="50.0" text="2" />
            <Button mnemonicParsing="false" onAction="#processNum" prefHeight="50.0" prefWidth="50.0" text="3" />
            <Button mnemonicParsing="false" onAction="#processOperator" prefHeight="50.0" prefWidth="50.0" text="+" />
         </children>
      </HBox>

      <HBox alignment="CENTER" prefHeight="100.0" prefWidth="200.0" spacing="10.0">
         <children>
            <Button mnemonicParsing="false" onAction="#processNum" prefHeight="50.0" prefWidth="110.0" text="0" />
            <Button mnemonicParsing="false" onAction="#processOperator" prefHeight="50.0" prefWidth="50.0" text="=" />
            <Button mnemonicParsing="false" onAction="#processOperator" prefHeight="50.0" prefWidth="50.0" text="-" />
         </children>
      </HBox>


   </children>
</VBox>


------------------------------
Model:

package sample;

public class Model {

    public long calculation (long a, long b, String operator){

        switch (operator) {

            case "+":
                return a+b;
            case "-":
                return a-b;
            case "*":
                return a*b;
            case "/":
                if(b == 0) return 0;

                return a/b;

        }
      System.out.println("Unbekannter Operator");

        return 0;
    }

}

